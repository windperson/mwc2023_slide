---
title: Blazor寫一次就討好 &nbsp;<br/>&nbsp; Web ＆ App 開發

author: 老鮑伯
format:
    # pptx:
    #    reference-doc: ../templates/template.pptx
    revealjs:
        width: 1680
        height: 1050
        margin: 0.2
        slide-tone: false
        theme: simple
        menu:
            side: right
---


## Agenda

* Blazor Introduction
* WebRTC demo project

# Blazor Introduction

## What is (ASP.NET Core) Blazor

**Singla Page Application(SPA)** frammework for building interactive client-side web UI using .NET Core/5+ C# without "*too much*" client-side JavaScript.

:::: {.columns}

::: {.column width="70%"}

* Component-based architecture
* Different [hosting models](https://learn.microsoft.com/aspnet/core/blazor/hosting-models):
    * Blazor WebAssembly (Blazor WASM)
        * Blazor PWA (Progressive Web App)
        * **Blazor Hybrid**
    * Blazor Server
    * United in .NET 8 : *static server rendering*, *streaming rendering*, *interactive rendering(prerender)*

:::

::: {.column width="30%"}

![<https://wikipedia.org/wiki/Blazor>](./pics/Blazor.png)

:::

::::

## Razor components 

A self-contained chunk of user interface (UI), such as a page, dialog, or form.

Includes HTML markup and the processing logic required to inject data or respond to UI events.

- using **`.razor`** file extension:
   - (Optional) routing tag helpers (`@page`) or `@layout` directive
   - `@using` , `@implements`, `@inherits`, `@inject` for C# lang syntax and DI 
   - Razor syntax code to present HTML & Razor components (may mixed C# code)
   - `@code` block for C# code


## Razor components example {.scrollable}

```{.razor code-line-numbers="|1-3|5-38|40-47"}
@page "/fetchdata"
@using BlazorWasmAppDemo.Shared
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
    }
}
```

---

:::{.callout-tip}

* Component can consist other child components, and control via *"Parameters"*
* Component can be nested, reused, shared among projects
* A component can be made very easily then other traditional UI frameworks

:::

## CSS isolation for components {.scrollable}

* A "scoped" CSS file ( **.razor.css** ) can be added to a component to provide isolated CSS only for it.
* Support CSS Variable, so we can programmatically change CSS style in C# code.

:::: {.columns}

::: {.column width="50%"}

**Button.razor.css**
```{.css}
button {
    width: var(--btn-width);
    height: var(--btn-height);
    font-size: var(--btn-fontSize);
    color: var(--btn-foreground);
    background-color: var(--btn-background);
}
```
:::

::: {.column width="50%"}

**Button.razor**
```{.razor}
<button style="--btn-width:@CssAttributes.Width;
               --btn-height:@CssAttributes.Height;
               --btn-fontSize:@CssAttributes.FontSize;
               --btn-foreground:@CssAttributes.ForegroundColor;
               --btn-background:@CssAttributes.BackgroundColor;"
        @onclick="MouseClick">
    @Content
</button>

@code {
    [Parameter]
    public ButtonStyle CssAttributes { get; set; } = null!;

    /* other code */
}
```
:::

::::

[https://github.com/windperson/DemoBlazorDynamicCss](https://github.com/windperson/DemoBlazorDynamicCss){:target="_blank"}

## Data binding

* One-way data binding
* Two-way data binding
* Event binding

## Event binding example {.scrollable}

```{.razor code-line-numbers="9,14-17"}
@page "/counter"

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }
}
```

## Routing and Layouts

* For Browser's Url routing, using `@page` directive
* [Kebab-case](https://developer.mozilla.org/docs/Glossary/Kebab_case) naming convention

## Dependency injection

* Use the `@inject` directive to inject services into components.
* Co-operate with the .NET Core DI container.

```{.cs code-line-numbers="5-8"}
var builder = WebAssemblyHostBuilder.CreateDefault(args);

/* other builder config code*/

builder.Services.AddScoped(sp => 
    new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });
builder.Services.AddScoped<IPlatformInfo, PlatformInfo>();
builder.Services.AddScoped<BrowserService>();

await builder.Build().RunAsync();
```

## JavaScript interop

* Call JavaScript function from .NET method
* Call .NET method from JavaScript function
* Using `[JSImport]` / `[JSExport]` attribute in Blazor WASM(.NET 7+)

## Blazor Hybrid on .NET MAUI {.scrollable}

:::: {.columns}

::: {.column width="50%"}
* The Blazor Hybrid can run on [.NET MAUI(Multi-platform App UI)](https://dotnet.microsoft.com/apps/maui) / [WPF](https://github.com/dotnet/wpf) / [Winform](https://github.com/dotnet/winforms) Native apps.
* We can use the same Blazor source code to build Web and App.(Reusable UI)
:::

::: {.column width="50%"}
![*VS 2022 project template*](./pics/BlazorMauiProjectTemplate.png)
:::

::::

---

:::: {.columns}

::: {.column width="50%"}
The Power of Blazor Hybrid on .NET MAUI is that we can call .NET MAUI API from Blazor `@code` block.
:::

::: {.column width="50%"}
![](./pics/Blazor_Hybrid_OnMAUI.png){.r-stretch}
:::

::::

## Reuse UI for Web & App via RCL 

:::: {.columns}

::: {.column width="50%"}

By using [Razor Class Library(RCL)](https://learn.microsoft.com/aspnet/core/razor-pages/ui-class) to share UI components between Web and App.

::: 

::: {.column width="50%"}

![](./pics/Using_RCL_share_UI.png)

:::

::::

## Project setup {.scrollable}

1. 建立MAUI (with Hybrid Blazor)專案
2. 建立RCL(Razor Class Library)專案，並將其加入MAUI專案的專案引用(Project Reference)
3. 將MAUI專案中Blazor相關目錄&檔案搬移到RCL專案中
4. 修改還留在MAUI專案中的必要Blazor所需檔案內容，包括網頁靜態資源引用路徑、Blazor路由元件增加”AdditionalAssemblies”屬性設定
5. 啟動MAUI專案驗證功能是否正常
6. 用Visual Studio 2022專案精靈建立WASM Blazor專案及配套來跑的asp.net core測試後端
7. 將RCL專案加入到WASM Blazor專案的專案引用
8. 搬移WASM Blazor專案與Razor頁面相關之目錄＆檔案，與RCL專案中既有的合併
9. 修改還留在WASM Blazor專案中的必要Blazor所需檔案內容，包括網頁靜態資源引用路徑、Blazor路由元件增加”AdditionalAssemblies”屬性設定
10. 個別啟動WASM Blazor、MAUI專案，驗證功能均可正常運作

# WebRTC demo project

## Project structure

# Conclusion

## Reference

* [ASP.NET Core Blazor](https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor)
* [Introduction to WebRTC protocols](https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Protocols)
* [Udemy - AspNetCore Blazor:The Big Picture](https://www.udemy.com/course/aspnet-core-blazor-the-big-picture/)
* [MS Learn - Build web applications with Blazor](https://learn.microsoft.com/en-us/training/paths/build-web-apps-with-blazor/)