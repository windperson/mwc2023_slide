---
title: Blazor寫一次就討好 &nbsp;<br/>&nbsp; Web ＆ App 開發

author: 老鮑伯
format:
    # pptx:
    #    reference-doc: ../templates/template.pptx
    revealjs:
        width: 1700
        height: 1050
        margin: 0.2
        slide-tone: false
        theme: simple
        menu:
            side: right
---


## Agenda

::: {.r-stretch}

![](URL.svg)

::: 

* Blazor Introduction
* WebRTC demo project

Slides made by [**Quarto**](https://quarto.org){target="_blank"} & GitHub Action: 

[https://github.com/windperson/mwc2023_slide](https://github.com/windperson/mwc2023_slide){target="_blank"}

# Blazor Introduction

## What is (ASP.NET Core) Blazor

**Singla Page Application(SPA)** frammework for building interactive client-side web UI using .NET Core/5+ C# without "*too much*" client-side JavaScript.

:::: {.columns}

::: {.column width="70%"}

* Component-based architecture
* Different [hosting models](https://learn.microsoft.com/aspnet/core/blazor/hosting-models){target="_blank"}:
    * Blazor WebAssembly (Blazor WASM)
        * Blazor PWA (Progressive Web App)
        * **Blazor Hybrid**
    * Blazor Server
    * United in .NET 8 : *static server rendering*, *streaming rendering*, *interactive rendering(prerender)*

:::

::: {.column width="30%"}

![[https://wikipedia.org/wiki/Blazor](https://wikipedia.org/wiki/Blazor){target="_blank"}](./pics/Blazor.png)

:::

::::

## Razor components 

A self-contained chunk of user interface (UI), such as a page, dialog, or form.

Includes HTML markup and the processing logic required to inject data or respond to UI events.

- using **`.razor`** file extension:
   - (Optional) routing tag helpers (`@page`) or `@layout` directive
   - `@using` , `@implements`, `@inherits`, `@inject` for C# lang syntax and DI 
   - Razor syntax code to present HTML & Razor components (may mixed C# code)
   - `@code` block for C# code


## Razor components example {.scrollable}

```{.razor code-line-numbers="|1-3|5-38|40-47"}
@page "/fetchdata"
@using BlazorWasmAppDemo.Shared
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
    }
}
```

---

:::{.callout-tip}

* Component can consist other child components, and control via *"Parameters"*
* Component can be nested, reused, shared among projects
* A component can be made very easily then other traditional UI frameworks

:::

## CSS isolation for components {.scrollable}

A "scoped" CSS file ( **.razor.css** ) can be added to a component to provide isolated CSS only for it.

Support [CSS Variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties){target="_blank"}, so we can programmatically change CSS style in C# code.

:::: {.columns}

::: {.column width="50%"}

**Button.razor.css**
```{.css}
button {
    width: var(--btn-width);
    height: var(--btn-height);
    font-size: var(--btn-fontSize);
    color: var(--btn-foreground);
    background-color: var(--btn-background);
}
```
:::

::: {.column width="50%"}

**Button.razor**
```{.razor}
<button style="--btn-width:@CssAttributes.Width;
               --btn-height:@CssAttributes.Height;
               --btn-fontSize:@CssAttributes.FontSize;
               --btn-foreground:@CssAttributes.ForegroundColor;
               --btn-background:@CssAttributes.BackgroundColor;"
        @onclick="MouseClick">
    @Content
</button>

@code {
    [Parameter]
    public ButtonStyle CssAttributes { get; set; } = null!;

    /* other code */
}
```
:::

::::

[DemoBlazorDynamicCss](https://github.com/windperson/DemoBlazorDynamicCss){target="_blank"} example project

## Data binding

* One-way data binding
* Two-way data binding
* Event binding

## Event binding example {.scrollable}

```{.razor code-line-numbers="9,14-17"}
@page "/counter"

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }
}
```

## Routing and Layouts

* For Browser's Url routing, using `@page` directive
* [Kebab-case](https://developer.mozilla.org/docs/Glossary/Kebab_case){target="_blank"} naming convention
* Provide a mechanism to show common error page when routing to a non-existing page

```{.razor code-line-numbers="6-11"}
<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>
```

## Dependency injection

* Use the `@inject` directive to inject services into components.
* Co-operate with the .NET Core DI container.

```{.cs code-line-numbers="5-8"}
var builder = WebAssemblyHostBuilder.CreateDefault(args);

/* other builder config code*/

builder.Services.AddScoped(sp => 
    new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });
builder.Services.AddScoped<IPlatformInfo, PlatformInfo>();
builder.Services.AddScoped<BrowserService>();

await builder.Build().RunAsync();
```

## JavaScript interop

* [Call JavaScript function from .NET method](https://learn.microsoft.com/aspnet/core/blazor/javascript-interoperability/call-javascript-from-dotnet){target="_blank"}
* [Call .NET method from JavaScript function](https://learn.microsoft.com/aspnet/core/blazor/javascript-interoperability/call-dotnet-from-javascript){target="_blank"}
* Using `[JSImport]` / `[JSExport]` attribute in Blazor WASM(.NET 7+)


We can use Js Interop to co-operate something that Blazor doesn't support yet, such as [WebRTC](https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API){target="_blank"} or [WebGL](https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API){target="_blank"}.


![[Three.js interop demo](https://github.com/windperson/MauiBlazorThreeJsDemo){target="_blank"}](./pics/android_screen_shot.png)


## Blazor Hybrid on .NET MAUI {.scrollable}

:::: {.columns}

::: {.column width="50%"}
* The Blazor Hybrid can run on [.NET MAUI(Multi-platform App UI)](https://dotnet.microsoft.com/apps/maui){target="_blank"} / [WPF](https://github.com/dotnet/wpf){target="_blank"} / [Winform](https://github.com/dotnet/winforms){target="_blank"} Native apps.
* We can use the same Blazor source code to build Web and App.(Reusable UI)
:::

::: {.column width="50%"}
![*VS 2022 project template*](./pics/BlazorMauiProjectTemplate.png)
:::

::::

---

:::: {.columns}

::: {.column width="50%"}
The Power of Blazor Hybrid on .NET MAUI is that we can call .NET MAUI API from Blazor `@code` block.
:::

::: {.column width="50%"}
![](./pics/Blazor_Hybrid_OnMAUI.png){.r-stretch}
:::

::::

## Reuse UI for Web & App via RCL 

:::: {.columns}

::: {.column width="50%"}

By using [Razor Class Library(RCL)](https://learn.microsoft.com/aspnet/core/razor-pages/ui-class){target="_blank"} to share UI components between Web and App.

::: 

::: {.column width="50%"}

![](./pics/Using_RCL_share_UI.png)

:::

::::

## Project setup {.scrollable}

1. 建立 MAUI (with Hybrid Blazor) 專案
2. 建立 RCL(Razor Class Library) 專案，並將其加入 MAUI 專案的[專案參考 (Project Reference)](https://learn.microsoft.com/visualstudio/ide/managing-references-in-a-project?view=vs-2022){target="_blank"}
3. 將 MAUI 專案中 Blazor 相關目錄&檔案搬移到 RCL 專案中
4. 修改還留在 MAUI 專案中的必要 Blazor 所需檔案內容，包括網頁靜態資源引用路徑、Blazor 路由元件增加 [`AdditionalAssemblies`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.components.routing.router.additionalassemblies){target="_blank"} 屬性並指定至搬移到 RCL 專案的 MainLayout 元件
5. 啟動 MAUI 專案驗證功能是否正常
6. 用 Visual Studio 2022 專案精靈建立 Blazor WASM 專案及搭配的 asp.net core 測試後端專案
7. 將 RCL 專案加入到 Blazor WASM 專案的專案參考 (Project Reference)
8. 搬移 Blazor WASM 專案與 Razor 頁面相關之目錄＆檔案，與 RCL 專案中既有的合併或調整
9. 修改還留在 Blazor WASM 專案組合中的必要 Blazor 所需檔案內容，包括網頁靜態資源引用路徑、Blazor 路由元件增加 `AdditionalAssemblies` 屬性設定，以及配套 asp.net core 後端專案移除掉不使用的 API Controller， `Program.cs` 修改為正確的 DI 服務設定
10. 個別啟動 Blazor WASM、MAUI 專案，驗證功能均可正常運作

## Project setup - continued {.scrollable}

- 步驟 6 在專案精靈記得不要選到空白專案，並且最後一步要指定使用 .NET 7，還有勾選『ASP.NET Core託管 (ASP.NET Core Hosted) 』以便產生完整含執行 WASM 之用的 ASP.NET Core 後端專案組合 
    - 這麼做的目的是，.NET 7 的 Blazor WASM 完整專案範本產出來預設有『載入進度條』的新功能，此功能所需之 CSS 設定，得合併到 RCL 專案原本從 MAUI 專案搬過來的 app.css 之中
- 步驟 8 細部動作：
    1. 由專案精靈新建立的 Blazor WASM Client 專案中的 *Pages*、*Shared* 目錄都刪除
    2. 將另一個用來在 Blazor WASM 專案組合中前後端共用的 Data Model (名稱末尾為 `.Shared`)類別庫(Class Library)專案也刪除 
    3. Blazor WASM Client 專案中 **wwwroot/css** 目錄內除了 **app.css** 之外的檔案複製到 RCL 專案中的 **wwwroot/css** 目錄內
    4. Blazor WASM Client 專案中 **wwwroot/css/app.css** 檔案的部分內容抄寫到 RCL 專案中 **wwwroot/css/app.css** 檔案內

app.css 21~23 行
```{.css}
.btn:focus, .btn:active:focus, .btn-link.nav-link:focus, .form-control:focus, .form-check-input:focus {
  box-shadow: 0 0 0 0.1rem white, 0 0 0 0.25rem #258cfb;
}
```

app.css 70~101 行
```{.css}
.loading-progress {
    position: relative;
    display: block;
    width: 8rem;
    height: 8rem;
    margin: 20vh auto 1rem auto;
}

    .loading-progress circle {
        fill: none;
        stroke: #e0e0e0;
        stroke-width: 0.6rem;
        transform-origin: 50% 50%;
        transform: rotate(-90deg);
    }

        .loading-progress circle:last-child {
            stroke: #1b6ec2;
            stroke-dasharray: calc(3.141 * var(--blazor-load-percentage, 0%) * 0.8), 500%;
            transition: stroke-dasharray 0.05s ease-in-out;
        }

.loading-progress-text {
    position: absolute;
    text-align: center;
    font-weight: bold;
    inset: calc(20vh + 3.25rem) 0 auto 0.2rem;
}

    .loading-progress-text:after {
        content: var(--blazor-load-percentage-text, "Loading");
    }
```

## 

在 App, Web 都共用 RCL 專案裡定義的 Razor UI 頁面元件， *寫一次就同時討好 Web & App 的 UI 開發*。 

![](./pics/Demo_Shared_RCL_UI.png)

# WebRTC demo project

## {.r-stretch}

![](./pics/Blazor_WebRTC_demo.png)


## Project structure

source: <https://github.com/windperson/MWC2023WebRtcDemo>

Try to follow the [BlazorRtc](https://github.com/ParrhesiaJoe/BlazorRtc){target="_blank"} a Blazor WASM WebRTC demo project, but apply on Blazor Hybrid.

# Conclusion

## Reference

* [ASP.NET Core Blazor](https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor)
* [Blazor Essentials](https://www.jetbrains.com/guide/dotnet/tutorials/blazor-essentials/)
* [Introduction to WebRTC protocols](https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Protocols)
* [Udemy - AspNetCore Blazor:The Big Picture](https://www.udemy.com/course/aspnet-core-blazor-the-big-picture/)
* [MS Learn - Build web applications with Blazor](https://learn.microsoft.com/en-us/training/paths/build-web-apps-with-blazor/)